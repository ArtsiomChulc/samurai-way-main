{"version":3,"file":"static/js/208.1e6a00cd.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/component/Profile/ProfileInfo/profileInfo.module.scss?8d94","component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/component/common/styles/btnProfile.module.scss?35cd","component/Profile/ProfileInfo/Contact.tsx","component/Profile/ProfileInfo/ProfileData.tsx","webpack://samurai-way/./src/component/Profile/ProfileInfo/profileDataForm.module.scss?3927","component/Profile/ProfileInfo/ProfileDataForm.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_info\":\"profileInfo_profile_info__oKieG\",\"status\":\"profileInfo_status__Errcv\",\"profile_status\":\"profileInfo_profile_status__pNXC6\",\"status_text\":\"profileInfo_status_text__-OqRV\",\"img_name\":\"profileInfo_img_name__1KIne\",\"customFileUpload\":\"profileInfo_customFileUpload__vHech\",\"wrap_img\":\"profileInfo_wrap_img__3XHP-\",\"descWrap\":\"profileInfo_descWrap__ehAGq\",\"myInfo\":\"profileInfo_myInfo__LwywI\",\"wrapContacts\":\"profileInfo_wrapContacts__cpn6X\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport s from \"component/Profile/ProfileInfo/profileInfo.module.scss\";\nimport Preloader from \"../../common/preloader/Preloader\";\n\ntype PropsType = {\n    status: string;\n    updateStatus: (status: string) => void;\n};\n\nexport const ProfileStatusWithHook = (props: PropsType) => {\n    const [editeMode, setEditeMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditeMode = () => {\n        setEditeMode(true);\n    };\n\n    const deActivateEditeMode = () => {\n        setEditeMode(false);\n        props.updateStatus(status);\n    };\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let newStatus = e.currentTarget.value;\n        setStatus(newStatus);\n    };\n\n    return (\n        <div className={s.profile_status}>\n            {!editeMode ? (\n                <div>\n                    <p>Status: </p>\n                    <span className={s.status_text}>{props.status || \"No status\"}</span>\n                    <button onClick={activateEditeMode}>Изменить статус</button>\n                </div>\n            ) : (\n                <div>\n                    <p>Edite status: </p>\n                    <input onBlur={deActivateEditeMode} onChange={onStatusChange} value={status} autoFocus />\n                    <button>Сохранить статус</button>\n                </div>\n            )}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btnChangeInfo\":\"btnProfile_btnChangeInfo__Z2U3e\"};","import React from \"react\";\n\ntype ContactPropsType = {\n    contactTitle: string;\n    contactValue: string | null;\n};\n\nconst Contact = (props: ContactPropsType) => {\n    const { contactTitle, contactValue } = props;\n    return (\n        <li>\n            <b>\n                {contactTitle}: {contactValue ? contactValue : \"not yet\"}\n            </b>\n        </li>\n    );\n};\n\nexport default Contact;\n","import React, { ChangeEvent } from \"react\";\nimport s from \"component/Profile/ProfileInfo/profileInfo.module.scss\";\nimport style from \"../../common/styles/btnProfile.module.scss\";\nimport Contact from \"component/Profile/ProfileInfo/Contact\";\nimport { ProfileType } from \"Redux/profile-reducer\";\n\ntype ProfileDataPropsType = {\n    profile: ProfileType | null;\n    onPhotoSelected: (e: ChangeEvent<HTMLInputElement>) => void;\n    isOwner: boolean;\n    setEditeMode: (x: boolean) => void;\n};\n\nconst ProfileData = (props: ProfileDataPropsType) => {\n    const jobDescription = props.profile?.lookingForAJobDescription;\n    const LookingForAJob = props.profile?.lookingForAJob;\n    const contacts = props.profile?.contacts ? props.profile.contacts : \"\";\n\n    const onChangeInfo = () => {\n        props.setEditeMode(true);\n    };\n\n    return (\n        <div className={s.descWrap}>\n            <div className={s.myInfo}>\n                <span>\n                    <b>Name</b>: {props.profile?.fullName}\n                </span>\n                <span>\n                    <b>About Me</b>: {props.profile?.aboutMe}\n                </span>\n                <span>\n                    <b>Looking for a Job description</b>: {jobDescription}\n                </span>\n                <span>\n                    <b>Looking for a Job</b>: {LookingForAJob ? \"Yes\" : \"No\"}\n                </span>\n            </div>\n            {props.isOwner && (\n                <span>\n                    <button className={style.btnChangeInfo} onClick={onChangeInfo}>\n                        change information\n                    </button>\n                </span>\n            )}\n            <div className={s.wrapContacts}>\n                <ul>\n                    {Object.keys(contacts).map((key) => {\n                        // @ts-ignore\n                        return <Contact key={key} contactTitle={key} contactValue={props.profile?.contacts[key]} />;\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileData;\n","// extracted by mini-css-extract-plugin\nexport default {\"formBlock\":\"profileDataForm_formBlock__saXxI\",\"wrapCheckBox\":\"profileDataForm_wrapCheckBox__G6v1s\",\"wrapBtn\":\"profileDataForm_wrapBtn__Htpug\"};","import React from \"react\";\nimport { useFormik } from \"formik\";\nimport s from \"component/Profile/ProfileInfo/profileDataForm.module.scss\";\nimport style from \"../../common/styles/btnProfile.module.scss\";\n\ntype ProfileDataFormPropsType = {\n    saveProfile: (x: FormikResType) => void;\n    setEditeMode: (x: boolean) => void;\n};\n\nexport type FormikResType = {\n    fullName: string;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    aboutMe: string | null;\n};\n\nconst ProfileData = (props: ProfileDataFormPropsType) => {\n    const formik = useFormik({\n        initialValues: {\n            fullName: \"\",\n            lookingForAJob: false,\n            lookingForAJobDescription: \"\",\n            aboutMe: \"\",\n        },\n        onSubmit: (values: FormikResType) => {\n            props.saveProfile(values);\n            formik.resetForm();\n            props.setEditeMode(false);\n        },\n        validate: () => {},\n    });\n    return (\n        <form onSubmit={formik.handleSubmit} className={s.formBlock}>\n            <span>Name: </span> <input {...formik.getFieldProps(\"fullName\")} />\n            <br />\n            <span>About Me: </span> <input {...formik.getFieldProps(\"aboutMe\")} />\n            <br />\n            <span>looking for a Job Description: </span>{\" \"}\n            <input {...formik.getFieldProps(\"lookingForAJobDescription\")} />\n            <br />\n            <span className={s.wrapCheckBox}>\n                <span>Looking for a JOB: </span> <input type={\"checkbox\"} {...formik.getFieldProps(\"lookingForAJob\")} />\n            </span>\n            <br />\n            <span className={s.wrapBtn}>\n                <button className={style.btnChangeInfo} type={\"submit\"}>\n                    Save info\n                </button>\n            </span>\n        </form>\n    );\n};\n\nexport default ProfileData;\n","import React, { ChangeEvent, useState } from \"react\";\nimport s from \"component/Profile/ProfileInfo/profileInfo.module.scss\";\nimport { ProfileType } from \"Redux/profile-reducer\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport PhotoUserProfile from \"../../../assets/images/userPhoto/user-icon.jpg\";\nimport { ProfileStatusWithHook } from \"./ProfileStatusWithHooks\";\nimport ProfileData from \"component/Profile/ProfileInfo/ProfileData\";\nimport ProfileDataForm, { FormikResType } from \"component/Profile/ProfileInfo/ProfileDataForm\";\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null;\n    status: string;\n    updateStatus: (status: string) => void;\n    isOwner: boolean;\n    savePhoto: (file: File) => void;\n    saveProfile: (x: FormikResType) => void;\n};\n\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\n    const [editeMode, setEditeMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader />;\n    }\n\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        const files = e.currentTarget.files;\n\n        if (files && files.length) {\n            props.savePhoto(files[0]);\n        }\n    };\n\n    return (\n        <div className={s.profile_info}>\n            <div className={s.status}>\n                <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus} />\n            </div>\n            <div className={s.img_name}>\n                <div className={s.wrap_img}>\n                    <img\n                        src={props.profile?.photos.small ? props.profile.photos.small : PhotoUserProfile}\n                        alt=\"Photo User Profile\"\n                    />\n                </div>\n                <span>\n                    <label htmlFor=\"file-upload\" className={s.customFileUpload}></label>\n                    {props.isOwner && <input id=\"file-upload\" type={\"file\"} onChange={onPhotoSelected} />}\n                </span>\n            </div>\n            {!editeMode ? (\n                <ProfileData\n                    profile={props.profile}\n                    onPhotoSelected={onPhotoSelected}\n                    isOwner={props.isOwner}\n                    setEditeMode={setEditeMode}\n                />\n            ) : (\n                <ProfileDataForm saveProfile={props.saveProfile} setEditeMode={setEditeMode} />\n            )}\n        </div>\n    );\n};\n\nexport default ProfileInfo;\n"],"names":["ProfileStatusWithHook","props","useState","editeMode","setEditeMode","status","setStatus","useEffect","className","s","onBlur","updateStatus","onChange","e","newStatus","currentTarget","value","autoFocus","onClick","contactTitle","contactValue","jobDescription","profile","lookingForAJobDescription","LookingForAJob","lookingForAJob","contacts","fullName","aboutMe","isOwner","style","Object","keys","map","key","formik","useFormik","initialValues","onSubmit","values","saveProfile","resetForm","validate","handleSubmit","getFieldProps","type","Preloader","onPhotoSelected","files","length","savePhoto","src","photos","small","PhotoUserProfile","alt","htmlFor","id","ProfileDataForm"],"sourceRoot":""}