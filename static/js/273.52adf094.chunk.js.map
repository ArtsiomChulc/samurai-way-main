{"version":3,"file":"static/js/273.52adf094.chunk.js","mappings":"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","sources":["component/Profile/profile.module.css","webpack://samurai-way/./src/component/Profile/ProfileInfo/profileInfo.module.css?b60b","component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"profile_info\":\"profileInfo_profile_info__vJhcd\",\"descWrap\":\"profileInfo_descWrap__U1AsP\",\"img_name\":\"profileInfo_img_name__IsUnh\",\"wrap_img\":\"profileInfo_wrap_img__zBeW+\",\"lookJob\":\"profileInfo_lookJob__hIUCb\",\"smileJob\":\"profileInfo_smileJob__kWPar\",\"wrapContacts\":\"profileInfo_wrapContacts__aWFmB\",\"status\":\"profileInfo_status__RUSiu\",\"profile_status\":\"profileInfo_profile_status__MHHuk\",\"status_text\":\"profileInfo_status_text__uUiwC\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport s from \"./profileInfo.module.css\";\nimport Preloader from \"../../common/preloader/Preloader\";\n\ntype PropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\ntype StateType = {\n  editMode: boolean;\n  status: string;\n};\n\nexport const ProfileStatusWithHook = (props: PropsType) => {\n  const [editeMode, setEditeMode] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditeMode = () => {\n    setEditeMode(true);\n  };\n\n  const deActivateEditeMode = () => {\n    setEditeMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    let newStatus = e.currentTarget.value;\n    setStatus(newStatus);\n  };\n\n  return (\n    <div className={s.profile_status}>\n      {!editeMode ? (\n        <div>\n          <p>Status: </p>\n          <span className={s.status_text}>{props.status || \"No status\"}</span>\n          <button onClick={activateEditeMode}>Изменить статус</button>\n        </div>\n      ) : (\n        <div>\n          <p>Edite status: </p>\n          <input onBlur={deActivateEditeMode} onChange={onStatusChange} value={status} autoFocus />\n          <button>Сохранить статус</button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./profileInfo.module.css\";\nimport { ProfileType } from \"../../../Redux/profile-reducer\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport PhotoUserProfile from \"../../../assets/images/userPhoto/user-icon.jpg\";\nimport JobTruePhoto from \"../../../img/profileUser/profileInfo/job_true.png\";\nimport JobFalsePhoto from \"../../../img/profileUser/profileInfo/job_false.jpg\";\nimport { ProfileStatus } from \"./ProfileStatus\";\nimport { ProfileStatusWithHook } from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoPropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n  if (!props.profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className={s.profile_info}>\n      <div className={s.status}>\n        <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus} />\n        {/*<img*/}\n        {/*    src='https://img3.akspic.ru/previews/0/2/0/2/7/172020/172020-sntis-gora-priroda-peyzash-sammit-x750.jpg'*/}\n        {/*    alt=\"dffdd\"/>*/}\n      </div>\n      <div className={s.descWrap}>\n        <div className={s.img_name}>\n          <div className={s.wrap_img}>\n            <img\n              src={props.profile.photos.small ? props.profile.photos.small : PhotoUserProfile}\n              alt=\"Photo User Profile\"\n            />\n          </div>\n          <p>Name: {props.profile.fullName}</p>\n        </div>\n        <div className={s.lookJob}>\n          <span>Looking for a JOB: </span>\n          <div className={s.smileJob}>\n            <img src={props.profile.lookingForAJob ? JobTruePhoto : JobFalsePhoto} alt=\"Smile\" />\n          </div>\n        </div>\n        <div className={s.wrapContacts}>\n          <ul>\n            <li>Facebook: {props.profile.contacts.facebook ? props.profile.contacts.facebook : \"Not Yet\"}</li>\n            <li>Website: {props.profile.contacts.website ? props.profile.contacts.website : \"Not Yet\"}</li>\n            <li>VKontakte: {props.profile.contacts.vk ? props.profile.contacts.vk : \"Not Yet\"}</li>\n            <li>Twitter: {props.profile.contacts.twitter ? props.profile.contacts.twitter : \"Not Yet\"}</li>\n            <li>Instagram: {props.profile.contacts.instagram ? props.profile.contacts.instagram : \"Not Yet\"}</li>\n            <li>YouTube: {props.profile.contacts.youtube ? props.profile.contacts.youtube : \"Not Yet\"}</li>\n            <li>GitHub: {props.profile.contacts.github ? props.profile.contacts.github : \"Not Yet\"}</li>\n            <li>MainLink: {props.profile.contacts.mainLink ? props.profile.contacts.mainLink : \"Not Yet\"}</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { lazy, Suspense } from \"react\";\nimport s from \"./profile.module.css\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\n// import MyPostContainer from \"./MyPost/MyPostContainer\";\nimport { ProfileType } from \"Redux/profile-reducer\";\nimport Preloader from \"component/common/preloader/Preloader\";\nconst MyPostContainer = lazy(() => import(\"./MyPost/MyPostContainer\"));\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null;\n    status: string;\n    updateStatus: (status: string) => void;\n    isAuth: boolean;\n};\n\nexport const Profile = (props: ProfileInfoPropsType) => {\n    // REDIRECT\n    // if(!props.isAuth) return <Redirect to={'login'}/>\n\n    return (\n        <div className={s.profile}>\n            <Suspense fallback={<Preloader />}>\n                <ProfileInfo status={props.status} updateStatus={props.updateStatus} profile={props.profile} />\n            </Suspense>\n            <MyPostContainer />\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Profile } from \"./Profile\";\nimport {\n    getStatusProfileThunkCreator,\n    getUsersProfileThunkCreator,\n    ProfileType,\n    updateStatusProfileThunkCreator,\n} from \"Redux/profile-reducer\";\nimport { connect } from \"react-redux\";\nimport { AppRootStateType } from \"Redux/redux-store\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { getAuthId, getIsAuthSelector, getProfileReselect, getStatus } from \"Redux/selectors/selectors\";\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        this.props.getUsersProfile(userId);\n\n        this.props.getStatusProfile(userId);\n\n        // profileAPI.getProfile(userId)\n        //     .then(data => {\n        //         this.props.SetUsersProfileAC(data)\n        //     })\n    }\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatusProfile}\n                isAuth={this.props.isAuth}\n            />\n        );\n    }\n}\n\ntype MatchParamsType = {\n    userId: string;\n};\n\ntype PropsType = RouteComponentProps<MatchParamsType> & ProfileInfoPropsType;\n\ntype MapDispatchPropsType = {\n    getUsersProfile: (id: string) => void;\n    getStatusProfile: (id: string) => void;\n    updateStatusProfile: (status: string) => void;\n};\n\ntype MapStatePropsType = {\n    profile: ProfileType | null;\n    status: string;\n    isAuth: boolean;\n    authorizedUserId: string;\n};\n\nexport type ProfileInfoPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: AppRootStateType) => {\n    return {\n        profile: getProfileReselect(state),\n        status: getStatus(state),\n        isAuth: getIsAuthSelector(state),\n        authorizedUserId: getAuthId(state),\n    };\n};\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUsersProfile: getUsersProfileThunkCreator,\n        getStatusProfile: getStatusProfileThunkCreator,\n        updateStatusProfile: updateStatusProfileThunkCreator,\n    }),\n    // withAuthRedirect,\n    withRouter,\n)(ProfileContainer);\n\n// const ProfileContainerWithRouter = withRouter(ProfileContainer)\n//\n// let WithReDirect = withAuthRedirect(ProfileContainerWithRouter)\n//\n// export default connect(mapStateToProps, {getUsersProfile: getUsersProfileThunkCreator})(WithReDirect)\n"],"names":["ProfileStatusWithHook","props","useState","editeMode","setEditeMode","status","setStatus","useEffect","className","s","onBlur","updateStatus","onChange","e","newStatus","currentTarget","value","autoFocus","onClick","ProfileInfo","profile","src","photos","small","PhotoUserProfile","alt","fullName","lookingForAJob","JobTruePhoto","JobFalsePhoto","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Preloader","MyPostContainer","lazy","Profile","Suspense","fallback","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatusProfile","updateStatusProfile","isAuth","React","compose","connect","state","getProfileReselect","getStatus","getIsAuthSelector","getAuthId","getUsersProfileThunkCreator","getStatusProfileThunkCreator","updateStatusProfileThunkCreator","withRouter"],"sourceRoot":""}