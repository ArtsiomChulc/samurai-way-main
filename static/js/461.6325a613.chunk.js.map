{"version":3,"file":"static/js/461.6325a613.chunk.js","mappings":"wMACA,EAAuB,mBAAvB,EAAyD,2BAAzD,EAA2F,mBAA3F,EAA0H,wB,mBCQ7GA,EAAO,SAACC,GAKnB,OACE,iBAAKC,UAAWC,EAAhB,WACE,gBACEC,IAAI,sGACJC,IAAI,MAGN,iBAAMH,UAAWC,EAAjB,UACE,SAACG,EAAA,EAAD,CAAkBC,QAASN,EAAMM,QAASC,kBAZxB,SAACC,GACvBR,EAAMS,gBAAgBD,SAcpB,kBAAMP,UAAWC,EAAjB,WACE,gBAAKC,IAAI,+CAA+CC,IAAI,MAC5D,iBAAMH,UAAWC,EAAjB,SAA+BF,EAAMU,mBC1B7C,EAAyB,uBAAzB,EAAiE,+BAAjE,EAAwK,sB,oBCoDxK,EA9CeC,EAAAA,MAAW,SAACX,GA0BvB,IAAMY,GAAc,OAAIZ,EAAMa,MAAMA,OAAOC,UAAUC,KAAI,SAACC,GAKtD,OAAO,SAACjB,EAAD,CAAkBO,QAASU,EAAGC,KAAMP,UAAWM,EAAGN,UAAWD,gBAH5C,SAACD,GACrBR,EAAMO,kBAAkBC,EAAYQ,EAAGE,MAEzBF,EAAGE,OAGzB,OACI,iBAAKjB,UAAWC,EAAhB,WACI,0BACI,SAACiB,EAAD,CAAYC,QAASpB,EAAMqB,cAI9BT,QAgBPO,EAAa,SAACnB,GAChB,IAAMsB,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,cAAe,IAEnBC,SAAU,SAACC,GACP3B,EAAMoB,QAAQO,EAAOF,eACrBH,EAAOM,aAEXC,SAAU,SAACF,GACP,IAAMG,EAA0B,GAMhC,OALoC,IAAhCH,EAAOF,cAAcM,OACrBD,EAAOL,cAAgB,sEAChBE,EAAOF,cAAcM,OAAS,IACrCD,EAAOL,cAAgB,sJAEpBK,KAGf,OACI,kBAAMJ,SAAUJ,EAAOU,aAAc/B,UAAWC,EAAhD,WACI,+BAAcoB,EAAOW,cAAc,mBAClCX,EAAOQ,OAAOL,gBAAiB,gBAAKxB,UAAWC,EAAhB,SAA0BoB,EAAOQ,OAAOL,iBACxE,0BACI,mBAAQS,KAAM,SAAUjC,UAAWkC,EAAAA,EAAAA,IAAnC,4BC/ChB,GAFwBC,E,QAAAA,KArBF,SAACC,GACnB,MAAO,CACHxB,MAAOwB,EAAMC,gBAII,SAACC,GACtB,MAAO,CACHlB,UAAW,SAACL,GACRuB,GAASC,EAAAA,EAAAA,IAAUxB,KAMvBT,kBAAmB,SAACC,EAAoBU,GACpCqB,GAASE,EAAAA,EAAAA,IAAgBjC,EAAYU,QAKzBkB,CAA6CM","sources":["webpack://samurai-way/./src/component/Profile/Post/post.module.css?ad3f","component/Profile/Post/Post.tsx","webpack://samurai-way/./src/component/Profile/MyPost/mypost.module.css?b436","component/Profile/MyPost/MyPost.tsx","component/Profile/MyPost/MyPostContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post\":\"post_post__tfeAO\",\"message_text\":\"post_message_text__dR8Js\",\"like\":\"post_like__6LTKi\",\"likeCount\":\"post_likeCount__22JGR\"};","import React from \"react\";\nimport s from \"./post.module.css\";\nimport EditableSpanPost from \"../../common/editableSpan/EditableSpanPost\";\n\ntype PostType = {\n  message: string;\n  likeCount: number;\n  onChangeMessage: (newMessage: string) => void;\n};\nexport const Post = (props: PostType) => {\n  const onChangeMessage = (newMessage: string) => {\n    props.onChangeMessage(newMessage);\n  };\n\n  return (\n    <div className={s.post}>\n      <img\n        src=\"https://png.pngtree.com/png-vector/20190710/ourmid/pngtree-user-vector-avatar-png-image_1541962.jpg\"\n        alt=\"\"\n      />\n      {/*<span className={s.message_text}>{props.message}</span>*/}\n      <span className={s.message_text}>\n        <EditableSpanPost message={props.message} onChangeMessageCB={onChangeMessage} />\n      </span>\n\n      <span className={s.like}>\n        <img src=\"https://www.svgrepo.com/show/220662/like.svg\" alt=\"\" />\n        <span className={s.likeCount}>{props.likeCount}</span>\n      </span>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"myPost\":\"mypost_myPost__AsuSx\",\"wrapAddMessage\":\"mypost_wrapAddMessage__N2-QO\",\"btn\":\"mypost_btn__uNtyx\",\"errorText\":\"mypost_errorText__d-pvA\",\"error\":\"mypost_error__cx8Ih\"};","import React from \"react\";\nimport { Post } from \"../Post/Post\";\nimport s from \"./mypost.module.css\";\nimport btn from \"../../common/styles/btn.module.css\";\nimport { UsersPropsType } from \"./MyPostContainer\";\nimport { useFormik } from \"formik\";\n\nconst MyPost = React.memo((props: UsersPropsType) => {\n    // const [error, setError] = useState<string | null>(null)\n\n    // const newPostElement = React.createRef<HTMLTextAreaElement>()\n\n    // const addPost = (value: MyPostType) => {\n    //     let el = value.newPostFormik\n    //     // if (newPostElement.current?.value.trim() !== '') {\n    //     //     setError('')\n    //     // } else {\n    //     //     setError('Введите текст!!!')\n    //     // }\n    //     props.addPostCB(el)\n    // }\n\n    // const onkeydownHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    //     if (e.key === \"Enter\") {\n    //         addPost()\n    //     }\n    // }\n\n    // const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    //     let newText = e.currentTarget.value\n    //     props.onChangeHandlerCB(newText)\n    // }\n\n    const postElement = [...props.posts.posts].reverse().map((el) => {\n        // делаем имутабельно (не меняем наш state, делаем копию)\n        const onChangeMessage = (newMessage: string) => {\n            props.onChangeMessageCB(newMessage, el.id);\n        };\n        return <Post key={el.id} message={el.post} likeCount={el.likeCount} onChangeMessage={onChangeMessage} />;\n    });\n\n    return (\n        <div className={s.myPost}>\n            <div>\n                <MyPostForm addPost={props.addPostCB} />\n                {/*{error && <span className={s.errorText}>{error}</span>}*/}\n            </div>\n\n            {postElement}\n        </div>\n    );\n});\n\nexport default MyPost;\n\nexport type MyPostType = {\n    newPostFormik?: string;\n    addPost: (el: string) => void;\n};\n\nexport type FormikErrorType = {\n    newPostFormik?: string;\n};\n\nconst MyPostForm = (props: MyPostType) => {\n    const formik = useFormik({\n        initialValues: {\n            newPostFormik: \"\",\n        },\n        onSubmit: (values) => {\n            props.addPost(values.newPostFormik);\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (values.newPostFormik.length === 0) {\n                errors.newPostFormik = \"Введите пост\";\n            } else if (values.newPostFormik.length < 3) {\n                errors.newPostFormik = \"Ну еще чуть-чуть добавь букв)))\";\n            }\n            return errors;\n        },\n    });\n    return (\n        <form onSubmit={formik.handleSubmit} className={s.wrapAddMessage}>\n            <textarea {...formik.getFieldProps(\"newPostFormik\")} />\n            {formik.errors.newPostFormik && <div className={s.error}>{formik.errors.newPostFormik}</div>}\n            <div>\n                <button type={\"submit\"} className={btn.btn}>\n                    Add post\n                </button>\n            </div>\n        </form>\n    );\n};\n","import React from \"react\";\nimport { AddPostAC, ChangeMessageAC, ProfilePageType } from \"Redux/profile-reducer\";\nimport MyPost from \"./MyPost\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { AppRootStateType } from \"Redux/redux-store\";\n\ntype MapStatePropsType = {\n    posts: ProfilePageType;\n};\ntype MapDispatchPropsType = {\n    addPostCB: (el: string) => void;\n    // onChangeHandlerCB: (text: string) => void\n    onChangeMessageCB: (newMessage: string, id: number) => void;\n};\n\nexport type UsersPropsType = MapStatePropsType & MapDispatchPropsType;\n\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage,\n    };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPostCB: (el: string) => {\n            dispatch(AddPostAC(el));\n        },\n\n        // onChangeHandlerCB: (text: string) => {\n        //     dispatch(UpdateNewPostAC(text))\n        // },\n        onChangeMessageCB: (newMessage: string, id: number) => {\n            dispatch(ChangeMessageAC(newMessage, id));\n        },\n    };\n};\n\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost);\n\nexport default MyPostContainer;\n"],"names":["Post","props","className","s","src","alt","EditableSpanPost","message","onChangeMessageCB","newMessage","onChangeMessage","likeCount","React","postElement","posts","reverse","map","el","post","id","MyPostForm","addPost","addPostCB","formik","useFormik","initialValues","newPostFormik","onSubmit","values","resetForm","validate","errors","length","handleSubmit","getFieldProps","type","btn","connect","state","profilePage","dispatch","AddPostAC","ChangeMessageAC","MyPost"],"sourceRoot":""}