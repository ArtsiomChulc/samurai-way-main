{"version":3,"file":"static/js/930.bee68d81.chunk.js","mappings":"0KACA,EAA+B,kCAA/B,EAA4E,8BAA5E,EAAqH,8BAArH,EAA8J,8BAA9J,EAAsM,6BAAtM,EAA8O,8BAA9O,EAA2R,kCAA3R,EAAsU,4BAAtU,EAAmX,oCAAnX,EAAqa,iCAAra,EAAyd,sC,0DCa5cA,EAAwB,SAACC,GACpC,OAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAiBD,EAAMI,QAAnD,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAUL,EAAMI,UACf,CAACJ,EAAMI,SAgBV,OACE,gBAAKG,UAAWC,EAAhB,SACIN,GAOA,4BACE,2CACA,kBAAOO,OArBa,WAC1BN,GAAa,GACbH,EAAMU,aAAaN,IAmBuBO,SAhBrB,SAACC,GACtB,IAAIC,EAAYD,EAAEE,cAAcC,MAChCV,EAAUQ,IAc0DE,MAAOX,EAAQY,WAAS,KACtF,gIATF,4BACE,qCACA,iBAAMT,UAAWC,EAAjB,SAAiCR,EAAMI,QAAU,eACjD,mBAAQa,QApBU,WACxBd,GAAa,IAmBP,yGCuCV,EAhEoB,SAACH,GACjB,IAAKA,EAAMkB,QACP,OAAO,SAACC,EAAA,EAAD,IAWX,OACI,iBAAKZ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAACT,EAAD,CAAuBK,OAAQJ,EAAMI,OAAQM,aAAcV,EAAMU,kBAKrE,iBAAKH,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBACIY,IAAKpB,EAAMkB,QAAQG,OAAOC,MAAQtB,EAAMkB,QAAQG,OAAOC,MAAQC,EAC/DC,IAAI,0BAGZ,kCAAUxB,EAAMkB,QAAQO,aACxB,6BACI,kBAAOC,QAAQ,cAAcnB,UAAWC,IACvCR,EAAM2B,UAAW,kBAAOC,GAAG,cAAcC,KAAM,OAAQlB,SA3BpD,SAACC,GACrB,IAAMkB,EAAQlB,EAAEE,cAAcgB,MAE1BA,GAASA,EAAMC,QACf/B,EAAMgC,UAAUF,EAAM,cA0BlB,iBAAKvB,UAAWC,EAAhB,WACI,mDACA,gBAAKD,UAAWC,EAAhB,UACI,gBAAKY,IAAKpB,EAAMkB,QAAQe,eAAiBC,EAAeC,EAAeX,IAAI,gBAGnF,gBAAKjB,UAAWC,EAAhB,UACI,2BACI,uCACeR,EAAMkB,QAAQkB,SAASC,SAAWrC,EAAMkB,QAAQkB,SAASC,SAAW,cAEnF,sCAAcrC,EAAMkB,QAAQkB,SAASE,QAAUtC,EAAMkB,QAAQkB,SAASE,QAAU,cAChF,wCAAgBtC,EAAMkB,QAAQkB,SAASG,GAAKvC,EAAMkB,QAAQkB,SAASG,GAAK,cACxE,sCAAcvC,EAAMkB,QAAQkB,SAASI,QAAUxC,EAAMkB,QAAQkB,SAASI,QAAU,cAChF,wCACgBxC,EAAMkB,QAAQkB,SAASK,UAAYzC,EAAMkB,QAAQkB,SAASK,UAAY,cAEtF,sCAAczC,EAAMkB,QAAQkB,SAASM,QAAU1C,EAAMkB,QAAQkB,SAASM,QAAU,cAChF,qCAAa1C,EAAMkB,QAAQkB,SAASO,OAAS3C,EAAMkB,QAAQkB,SAASO,OAAS,cAC7E,uCACe3C,EAAMkB,QAAQkB,SAASQ,SAAW5C,EAAMkB,QAAQkB,SAASQ,SAAW,0B","sources":["webpack://samurai-way/./src/component/Profile/ProfileInfo/profileInfo.module.css?b60b","component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_info\":\"profileInfo_profile_info__vJhcd\",\"descWrap\":\"profileInfo_descWrap__U1AsP\",\"img_name\":\"profileInfo_img_name__IsUnh\",\"wrap_img\":\"profileInfo_wrap_img__zBeW+\",\"lookJob\":\"profileInfo_lookJob__hIUCb\",\"smileJob\":\"profileInfo_smileJob__kWPar\",\"wrapContacts\":\"profileInfo_wrapContacts__aWFmB\",\"status\":\"profileInfo_status__RUSiu\",\"profile_status\":\"profileInfo_profile_status__MHHuk\",\"status_text\":\"profileInfo_status_text__uUiwC\",\"customFileUpload\":\"profileInfo_customFileUpload__+k7wl\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport s from \"./profileInfo.module.css\";\nimport Preloader from \"../../common/preloader/Preloader\";\n\ntype PropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\ntype StateType = {\n  editMode: boolean;\n  status: string;\n};\n\nexport const ProfileStatusWithHook = (props: PropsType) => {\n  const [editeMode, setEditeMode] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditeMode = () => {\n    setEditeMode(true);\n  };\n\n  const deActivateEditeMode = () => {\n    setEditeMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    let newStatus = e.currentTarget.value;\n    setStatus(newStatus);\n  };\n\n  return (\n    <div className={s.profile_status}>\n      {!editeMode ? (\n        <div>\n          <p>Status: </p>\n          <span className={s.status_text}>{props.status || \"No status\"}</span>\n          <button onClick={activateEditeMode}>Изменить статус</button>\n        </div>\n      ) : (\n        <div>\n          <p>Edite status: </p>\n          <input onBlur={deActivateEditeMode} onChange={onStatusChange} value={status} autoFocus />\n          <button>Сохранить статус</button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { ChangeEvent } from \"react\";\nimport s from \"./profileInfo.module.css\";\nimport { ProfileType } from \"Redux/profile-reducer\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport PhotoUserProfile from \"../../../assets/images/userPhoto/user-icon.jpg\";\nimport JobTruePhoto from \"../../../img/profileUser/profileInfo/job_true.png\";\nimport JobFalsePhoto from \"../../../img/profileUser/profileInfo/job_false.jpg\";\nimport { ProfileStatusWithHook } from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null;\n    status: string;\n    updateStatus: (status: string) => void;\n    isOwner: boolean;\n    savePhoto: (file: File) => void;\n};\n\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\n    if (!props.profile) {\n        return <Preloader />;\n    }\n\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        const files = e.currentTarget.files;\n\n        if (files && files.length) {\n            props.savePhoto(files[0]);\n        }\n    };\n\n    return (\n        <div className={s.profile_info}>\n            <div className={s.status}>\n                <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus} />\n                {/*<img*/}\n                {/*    src='https://img3.akspic.ru/previews/0/2/0/2/7/172020/172020-sntis-gora-priroda-peyzash-sammit-x750.jpg'*/}\n                {/*    alt=\"dffdd\"/>*/}\n            </div>\n            <div className={s.descWrap}>\n                <div className={s.img_name}>\n                    <div className={s.wrap_img}>\n                        <img\n                            src={props.profile.photos.small ? props.profile.photos.small : PhotoUserProfile}\n                            alt=\"Photo User Profile\"\n                        />\n                    </div>\n                    <p>Name: {props.profile.fullName}</p>\n                    <span>\n                        <label htmlFor=\"file-upload\" className={s.customFileUpload}></label>\n                        {props.isOwner && <input id=\"file-upload\" type={\"file\"} onChange={onPhotoSelected} />}\n                    </span>\n                </div>\n                <div className={s.lookJob}>\n                    <span>Looking for a JOB: </span>\n                    <div className={s.smileJob}>\n                        <img src={props.profile.lookingForAJob ? JobTruePhoto : JobFalsePhoto} alt=\"Smile\" />\n                    </div>\n                </div>\n                <div className={s.wrapContacts}>\n                    <ul>\n                        <li>\n                            Facebook: {props.profile.contacts.facebook ? props.profile.contacts.facebook : \"Not Yet\"}\n                        </li>\n                        <li>Website: {props.profile.contacts.website ? props.profile.contacts.website : \"Not Yet\"}</li>\n                        <li>VKontakte: {props.profile.contacts.vk ? props.profile.contacts.vk : \"Not Yet\"}</li>\n                        <li>Twitter: {props.profile.contacts.twitter ? props.profile.contacts.twitter : \"Not Yet\"}</li>\n                        <li>\n                            Instagram: {props.profile.contacts.instagram ? props.profile.contacts.instagram : \"Not Yet\"}\n                        </li>\n                        <li>YouTube: {props.profile.contacts.youtube ? props.profile.contacts.youtube : \"Not Yet\"}</li>\n                        <li>GitHub: {props.profile.contacts.github ? props.profile.contacts.github : \"Not Yet\"}</li>\n                        <li>\n                            MainLink: {props.profile.contacts.mainLink ? props.profile.contacts.mainLink : \"Not Yet\"}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;\n"],"names":["ProfileStatusWithHook","props","useState","editeMode","setEditeMode","status","setStatus","useEffect","className","s","onBlur","updateStatus","onChange","e","newStatus","currentTarget","value","autoFocus","onClick","profile","Preloader","src","photos","small","PhotoUserProfile","alt","fullName","htmlFor","isOwner","id","type","files","length","savePhoto","lookingForAJob","JobTruePhoto","JobFalsePhoto","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink"],"sourceRoot":""}