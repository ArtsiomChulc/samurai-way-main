{"version":3,"file":"static/js/959.5ad2df5c.chunk.js","mappings":"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","sources":["component/Profile/profile.module.css","webpack://samurai-way/./src/component/Profile/Post/post.module.css?ad3f","component/Profile/Post/Post.tsx","webpack://samurai-way/./src/component/Profile/MyPost/mypost.module.css?b436","component/Profile/MyPost/MyPost.tsx","component/Profile/MyPost/MyPostContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"post_post__tfeAO\",\"message_text\":\"post_message_text__dR8Js\",\"like\":\"post_like__6LTKi\",\"likeCount\":\"post_likeCount__22JGR\"};","import React from \"react\";\nimport s from \"./post.module.css\";\nimport EditableSpanPost from \"../../common/editableSpan/EditableSpanPost\";\n\ntype PostType = {\n  message: string;\n  likeCount: number;\n  onChangeMessage: (newMessage: string) => void;\n};\nexport const Post = (props: PostType) => {\n  const onChangeMessage = (newMessage: string) => {\n    props.onChangeMessage(newMessage);\n  };\n\n  return (\n    <div className={s.post}>\n      <img\n        src=\"https://png.pngtree.com/png-vector/20190710/ourmid/pngtree-user-vector-avatar-png-image_1541962.jpg\"\n        alt=\"\"\n      />\n      {/*<span className={s.message_text}>{props.message}</span>*/}\n      <span className={s.message_text}>\n        <EditableSpanPost message={props.message} onChangeMessageCB={onChangeMessage} />\n      </span>\n\n      <span className={s.like}>\n        <img src=\"https://www.svgrepo.com/show/220662/like.svg\" alt=\"\" />\n        <span className={s.likeCount}>{props.likeCount}</span>\n      </span>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"myPost\":\"mypost_myPost__AsuSx\",\"wrapAddMessage\":\"mypost_wrapAddMessage__N2-QO\",\"btn\":\"mypost_btn__uNtyx\",\"errorText\":\"mypost_errorText__d-pvA\",\"error\":\"mypost_error__cx8Ih\"};","import React from \"react\";\nimport { Post } from \"../Post/Post\";\nimport s from \"./mypost.module.css\";\nimport btn from \"../../common/styles/btn.module.css\";\nimport { UsersPropsType } from \"./MyPostContainer\";\nimport { useFormik } from \"formik\";\n\nconst MyPost = React.memo((props: UsersPropsType) => {\n    // const [error, setError] = useState<string | null>(null)\n\n    // const newPostElement = React.createRef<HTMLTextAreaElement>()\n\n    // const addPost = (value: MyPostType) => {\n    //     let el = value.newPostFormik\n    //     // if (newPostElement.current?.value.trim() !== '') {\n    //     //     setError('')\n    //     // } else {\n    //     //     setError('Введите текст!!!')\n    //     // }\n    //     props.addPostCB(el)\n    // }\n\n    // const onkeydownHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    //     if (e.key === \"Enter\") {\n    //         addPost()\n    //     }\n    // }\n\n    // const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    //     let newText = e.currentTarget.value\n    //     props.onChangeHandlerCB(newText)\n    // }\n\n    const postElement = [...props.posts.posts].reverse().map((el) => {\n        // делаем имутабельно (не меняем наш state, делаем копию)\n        const onChangeMessage = (newMessage: string) => {\n            props.onChangeMessageCB(newMessage, el.id);\n        };\n        return <Post key={el.id} message={el.post} likeCount={el.likeCount} onChangeMessage={onChangeMessage} />;\n    });\n\n    return (\n        <div className={s.myPost}>\n            <div>\n                <MyPostForm addPost={props.addPostCB} />\n                {/*{error && <span className={s.errorText}>{error}</span>}*/}\n            </div>\n\n            {postElement}\n        </div>\n    );\n});\n\nexport default MyPost;\n\nexport type MyPostType = {\n    newPostFormik?: string;\n    addPost: (el: string) => void;\n};\n\nexport type FormikErrorType = {\n    newPostFormik?: string;\n};\n\nconst MyPostForm = (props: MyPostType) => {\n    const formik = useFormik({\n        initialValues: {\n            newPostFormik: \"\",\n        },\n        onSubmit: (values) => {\n            props.addPost(values.newPostFormik);\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (values.newPostFormik.length === 0) {\n                errors.newPostFormik = \"Введите пост\";\n            } else if (values.newPostFormik.length < 3) {\n                errors.newPostFormik = \"Ну еще чуть-чуть добавь букв)))\";\n            }\n            return errors;\n        },\n    });\n    return (\n        <form onSubmit={formik.handleSubmit} className={s.wrapAddMessage}>\n            <textarea {...formik.getFieldProps(\"newPostFormik\")} />\n            {formik.errors.newPostFormik && <div className={s.error}>{formik.errors.newPostFormik}</div>}\n            <div>\n                <button type={\"submit\"} className={btn.btn}>\n                    Add post\n                </button>\n            </div>\n        </form>\n    );\n};\n","import React from \"react\";\nimport { AddPostAC, ChangeMessageAC, ProfilePageType } from \"Redux/profile-reducer\";\nimport MyPost from \"./MyPost\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { AppRootStateType } from \"Redux/redux-store\";\n\ntype MapStatePropsType = {\n    posts: ProfilePageType;\n};\ntype MapDispatchPropsType = {\n    addPostCB: (el: string) => void;\n    // onChangeHandlerCB: (text: string) => void\n    onChangeMessageCB: (newMessage: string, id: number) => void;\n};\n\nexport type UsersPropsType = MapStatePropsType & MapDispatchPropsType;\n\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage,\n    };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addPostCB: (el: string) => {\n            dispatch(AddPostAC(el));\n        },\n\n        // onChangeHandlerCB: (text: string) => {\n        //     dispatch(UpdateNewPostAC(text))\n        // },\n        onChangeMessageCB: (newMessage: string, id: number) => {\n            dispatch(ChangeMessageAC(newMessage, id));\n        },\n    };\n};\n\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost);\n\nexport default MyPostContainer;\n","import React, { lazy, Suspense } from \"react\";\nimport s from \"./profile.module.css\";\n// import { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\nimport { ProfileType } from \"Redux/profile-reducer\";\nimport Preloader from \"component/common/preloader/Preloader\";\n\nconst ProfileInfo = lazy(() => import(\"./ProfileInfo/ProfileInfo\"));\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null;\n    status: string;\n    updateStatus: (status: string) => void;\n    isAuth: boolean;\n    isOwner: boolean;\n    savePhoto: (file: File) => void;\n};\n\nexport const Profile = (props: ProfileInfoPropsType) => {\n    // REDIRECT\n    // if(!props.isAuth) return <Redirect to={'login'}/>\n\n    return (\n        <div className={s.profile}>\n            <Suspense fallback={<Preloader />}>\n                <ProfileInfo\n                    isOwner={props.isOwner}\n                    status={props.status}\n                    updateStatus={props.updateStatus}\n                    profile={props.profile}\n                    savePhoto={props.savePhoto}\n                />\n            </Suspense>\n            <MyPostContainer />\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Profile } from \"./Profile\";\nimport {\n    getStatusProfileThunkCreator,\n    getUsersProfileThunkCreator,\n    ProfileType,\n    savePhotoTC,\n    updateStatusProfileThunkCreator,\n} from \"Redux/profile-reducer\";\nimport { connect } from \"react-redux\";\nimport { AppRootStateType } from \"Redux/redux-store\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { getAuthId, getIsAuthSelector, getProfileReselect, getStatus } from \"Redux/selectors/selectors\";\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        this.props.getUsersProfile(userId);\n\n        this.props.getStatusProfile(userId);\n\n        // profileAPI.getProfile(userId)\n        //     .then(data => {\n        //         this.props.SetUsersProfileAC(data)\n        //     })\n    }\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatusProfile}\n                isAuth={this.props.isAuth}\n                isOwner={!this.props.match.params.userId}\n            />\n        );\n    }\n}\n\ntype MatchParamsType = {\n    userId: string;\n};\n\ntype PropsType = RouteComponentProps<MatchParamsType> & ProfileInfoPropsType;\n\ntype MapDispatchPropsType = {\n    getUsersProfile: (id: string) => void;\n    getStatusProfile: (id: string) => void;\n    updateStatusProfile: (status: string) => void;\n    savePhoto: (file: File) => void;\n};\n\ntype MapStatePropsType = {\n    profile: ProfileType | null;\n    status: string;\n    isAuth: boolean;\n    authorizedUserId: string;\n};\n\nexport type ProfileInfoPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: AppRootStateType) => {\n    return {\n        profile: getProfileReselect(state),\n        status: getStatus(state),\n        isAuth: getIsAuthSelector(state),\n        authorizedUserId: getAuthId(state),\n    };\n};\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUsersProfile: getUsersProfileThunkCreator,\n        getStatusProfile: getStatusProfileThunkCreator,\n        updateStatusProfile: updateStatusProfileThunkCreator,\n        savePhoto: savePhotoTC,\n    }),\n    // withAuthRedirect,\n    withRouter,\n)(ProfileContainer);\n\n// const ProfileContainerWithRouter = withRouter(ProfileContainer)\n//\n// let WithReDirect = withAuthRedirect(ProfileContainerWithRouter)\n//\n// export default connect(mapStateToProps, {getUsersProfile: getUsersProfileThunkCreator})(WithReDirect)\n"],"names":["Post","props","className","s","src","alt","EditableSpanPost","message","onChangeMessageCB","newMessage","onChangeMessage","likeCount","React","postElement","posts","reverse","map","el","post","id","MyPostForm","addPost","addPostCB","formik","useFormik","initialValues","newPostFormik","onSubmit","values","resetForm","validate","errors","length","handleSubmit","getFieldProps","type","btn","connect","state","profilePage","dispatch","AddPostAC","ChangeMessageAC","MyPost","ProfileInfo","lazy","Profile","Suspense","fallback","Preloader","isOwner","status","updateStatus","profile","savePhoto","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatusProfile","updateStatusProfile","isAuth","compose","getProfileReselect","getStatus","getIsAuthSelector","getAuthId","getUsersProfileThunkCreator","getStatusProfileThunkCreator","updateStatusProfileThunkCreator","savePhotoTC","withRouter"],"sourceRoot":""}